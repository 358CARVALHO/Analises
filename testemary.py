import pandas as pd
import streamlit as st

# Criando o DataFrame com os dados originais + novos dados
data = {
    "Label": [
        "Acessar portal : / login - 18",
        "Login usuario : Realizar Pedido",
        "Navegar pelo showroom : Realizar Pedido",
        "Realizar Pedido",  # Novo dado (antigo "Controlador de Transa√ß√£o")
        "TOTAL"
    ],
    "# Samples": [213, 213, 213, 213, 852],
    "Average (ms)": [6570, 51608, 95108, 128690, 71094],
    "Median (ms)": [6224, 60033, 92673, 131328, 72641],
    "90% Line (ms)": [7133, 64030, 118463, 140443, 104018],
    "95% Line (ms)": [7467, 65067, 145705, 141203, 112334],
    "99% Line (ms)": [22325, 70983, 189298, 142945, 156201],
    "Min (ms)": [4581, 15835, 45422, 93415, 4581],
    "Maximum (ms)": [22478, 192229, 189977, 142987, 192229],
    "Error %": [0.0, 100.0, 100.0, 100.0, 80.0],
    "Throughput (/sec)": [9.3, 1.1, 1.1, 1.5, 3.25],
    "Received KB/sec": [127.18, 23.58, 2677.59, 835.54, 915.72],
    "Sent KB/sec": [6.72, 37.35, 139.18, 243.28, 106.63]
}

df = pd.DataFrame(data)

# Configura√ß√£o do Streamlit
st.title("An√°lise de Performance - Teste de Carga")
st.markdown("### M√©tricas de Tempo de Resposta e Erros")

# Exibindo o DataFrame
st.dataframe(df.style.format({
    "Average (ms)": "{:,.0f}",
    "Median (ms)": "{:,.0f}",
    "90% Line (ms)": "{:,.0f}",
    "Error %": "{:.2f}%"
}), height=250)

# An√°lise
st.header("Principais Insights")
st.subheader("üî¥ Problemas Cr√≠ticos:")
st.markdown("""
1. **Taxa de Erro Alarmante**:  
   - Login, Navega√ß√£o e Realizar Pedido t√™m **100% de falhas**.
   - Sistema completamente inoperante para fun√ß√µes cr√≠ticas sob carga.

2. **Lentid√£o Extrema**:  
   - Opera√ß√£o de Realizar Pedido leva **128s em m√©dia** (pico de 142s).  
   - 90% das transa√ß√µes totais demoram mais de **104 segundos**.
""")

st.subheader("üìä M√©tricas Chave:")
col1, col2, col3 = st.columns(3)
col1.metric("Throughput Total", "3.25 req/seg", delta="-72% vs esperado")
col2.metric("Erro Total", "80%", delta_color="inverse")
col3.metric("Pior Tempo", "192.2s", delta="+620% do aceit√°vel")

st.subheader("üõ† Recomenda√ß√µes:")
st.markdown("""
- **Priorizar Corre√ß√£o de Erros**:  
  Foco imediato em "Realizar Pedido" (fun√ß√£o cr√≠tica para neg√≥cio).  
- **Otimiza√ß√£o de Banco de Dados**:  
  Todos os tempos acima de 100s sugerem problemas graves de queries/√≠ndices.  
""")
# [...] (c√≥digo anterior mantido igual at√© a se√ß√£o de legenda)

# Se√ß√£o de Legenda KPIs (completa e explicativa)
st.header("üìñ Legenda Detalhada dos Indicadores")
st.markdown("""
###  Explica√ß√£o T√©cnica de Cada M√©trica:

| Coluna/M√©trica       | O Que Mede?                                                                 | Exemplo Pr√°tico                          | Valores Ideais            |
|----------------------|----------------------------------------------------------------------------|-----------------------------------------|---------------------------|
| **Label**           | Nome da transa√ß√£o/teste realizado                                         | "Realizar Pedido"                       | -                         |
| **# Samples**       | Quantidade total de requisi√ß√µes executadas                                | 213 = 213 tentativas de login           | Quanto maior, mais significativo |
| **Average (ms)**    | Tempo m√©dio de resposta da transa√ß√£o                                      | 128690ms = ~2 minutos por pedido        | < 2000ms (2 segundos)     |
| **Median (ms)**     | Valor que divide os tempos em duas partes iguais (50% acima/abaixo)       | 131328ms = Metade dos pedidos foi mais lento que isso | < 2000ms |
| **90% Line (ms)**   | 90% das requisi√ß√µes foram mais r√°pidas que este tempo                     | 140443ms = Apenas 10% foram piores      | < 4000ms (4 segundos)     |
| **Error %**         | Porcentagem de requisi√ß√µes que falharam                                   | 100% = Todas as tentativas de pedido falharam | < 1% (0.1% em sistemas cr√≠ticos) |
| **Throughput (/sec)** | Capacidade do sistema em processar requisi√ß√µes por segundo               | 1.5/sec = 1.5 pedidos processados a cada segundo | > 10 req/s (depende do sistema) |
| **Received KB/sec** | Dados recebidos pelo servidor (ex: uploads de formul√°rios) por segundo    | 835.54 KB/s = ~0.8 MB de dados recebidos a cada segundo | Monitorar picos anormais |
| **Sent KB/sec**     | Dados enviados pelo servidor (ex: imagens do cat√°logo) por segundo        | 243.28 KB/s = ~0.24 MB enviados por segundo | Monitorar picos anormais |

""")
# Se√ß√£o: Refer√™ncias T√©cnicas e Benchmarks
st.header("Por que esses n√∫meros s√£o ruins?")
st.markdown("""
### üîç **Crit√©rios de Avalia√ß√£o (Benchmarks)**  
Os par√¢metros abaixo s√£o baseados em padr√µes de mercado e melhores pr√°ticas de performance web:

| M√©trica               | Aceit√°vel (SaaS/Web) | Cr√≠tico               | Fonte                          |
|-----------------------|----------------------|-----------------------|--------------------------------|
| Tempo M√©dio (ms)      | < 2,000 ms          | > 5,000 ms           | [Google RAIL Model](https://web.dev/rail/) |
| Taxa de Erro          | < 1%                | > 5%                 | [SRE Book (Google)](https://sre.google/sre-book/service-level-objectives/) |
| Throughput (req/s)    | > 10 req/s          | < 2 req/s            | [JMeter Best Practices](https://jmeter.apache.org/usermanual/best-practices.html) |
| 90% Line (ms)         | < 4,000 ms          | > 10,000 ms          | [New Relic APM](https://newrelic.com/blog/how-to-relic/application-response-time) |
""")

st.subheader("**Problemas Identificados vs Benchmarks**")
st.markdown("""
1. **Tempo de Resposta (Showroom)**:
   - **95,108 ms (M√©dio)** vs **< 2,000 ms esperado**  
   ‚Üí **47x mais lento** que o aceit√°vel para opera√ß√µes cr√≠ticas.

2. **Taxa de Erro (Login/Navega√ß√£o)**:
   - **100% de falhas** vs **< 1% tolerado**  
   ‚Üí Sistema **totalmente indispon√≠vel** sob carga.

3. **Throughput**:
   - **1.1 req/s** vs **> 10 req/s esperado**  
   ‚Üí Capacidade **insuficiente** para uso real (ex: 50 usu√°rios concorrentes exigiriam ~50 req/s).
""")

# [...] (restante do c√≥digo mantido igual)